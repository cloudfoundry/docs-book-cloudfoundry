---
template_variables:
  book_title: Swisscom Developer Documentation
  book_title_short: Swisscom Dev Docs
  title: Swisscom Developer Documentation
  title_image: ../images/logo.png
  hero_text: Home for innovators and passionate developers
  product_full: Swisscom Application Cloud
  product_short: App Cloud
  product_name: APC
  product_abbr: (APC)
  product_url: https://developer.swisscom.com
  support_link: <a href="https://developer.swisscom.com/support/" target="_blank">Get Involved</a>
  support_call_to_action: <a href="https://developer.swisscom.com/support/" target="_blank">Get Involved</a>
  support_url: https://developer.swisscom.com/support/

  admin_read_only_role: <ul><li><strong>Admin Read-Only</strong> is a user role that has been assigned the <code>cloud_controller.admin_read_only</code> scope in UAA. This role has read-only access to all Cloud Controller API resources.</li></ul>
  admin_role: <ul><li><strong>Admin</strong> is a user role that has been assigned the <code>cloud_controller.admin</code> scope in UAA. An admin user has permissions on all orgs and spaces and can perform operational actions using the <a href="http://apidocs.cloudfoundry.org/">Cloud Controller API</a>. To create an account with <code>cloud_controller.admin</code> scope for your installation, see <a href="../adminguide/uaa-user-management.html#creating-admin-users">Create an Admin User</a>.</li></ul>
  admin: your Swisscom Application Cloud administrator
  api_endpoint_book: For more information, see the [Identifying your Cloud Foundry API Endpoint and Version](http://docs.cloudfoundry.org/running/cf-api-endpoint.html) topic.
  api_endpoint: https://api.lyra-836.appcloud.swisscom.com
  api_v1_format: <a href="http://docs.cloudfoundry.org/services/api-v1.html">v1 format</a>
  api_v2_format: <a href="http://docs.cloudfoundry.org/services/api.html">v2 format</a>
  app_domain: scapp.io
  app_sec_group_desc:  <code>description</code>   |This is an optional field that contains useful text for operators to manage security group rules. This field is available in Cloud Foundry v238 and later.
  app_sec_groups_link: For more information about creating ASGs, see the [Application Security Groups](../adminguide/app-sec-groups.html) topic.
  app_sec_groups: <a href="http://docs.cloudfoundry.org/adminguide/app-sec-groups.html">Application Security Groups</a>
  appsecgroupdesc1: <span>,</span> <br>    "description"&#58; "Allow http and https traffic from ZoneA"
  asg_desc: This field is available in Cloud Foundry v238 and later.
  asg_notifications_prereq:
  az: availability zones
  azs: For more information regarding scaling your deployment, view the [Zero Downtime Deployment and Scaling in CF](../concepts/high-availability.html#availability).
  billing_manager_role_note:
  billing_manager_role: <ul><li><strong>Billing Account Owners</strong> create and manage billing accounts and payment information.</li></ul>
  blobstore_kb:
  buildpacks_index_dea: or Droplet Execution Agent (DEA)
  buildpacks_php_dea: DEA release<br><pre class="terminal">$ cf files APP app/.bp/logs/bp.log</pre>
  cc_logging_default: <p class="note"><strong>Note</strong><span>:</span> By default, Cloud Foundry does not enable Cloud Controller request logging. To enable this feature, you must set the <code>cc.security_event_logging.enabled</code> property in your Cloud Foundry manifest to <code>true</code> and redeploy.</p>
  cli_download: https://github.com/cloudfoundry/cli#downloads
  cli_v6: <a href="https://docs.developer.swisscom.com/cf-cli/getting-started.html">Getting Started with the cf CLI</a>
  Cloud Foundry has used two architectures for managing application containers:
  cloud_controller_dea_agent:
  cloud_controller_dea_algorithm:
  cloud_controller_logging: For more information about how Cloud Foundry aggregates and streams logs and metrics, see the <a href="https://docs.cloudfoundry.org/loggregator/index.html">Overview of the Loggregator System</a> topic of the Cloud Foundry docs.
  concepts_product_model_header:
  concepts_product_model_image:
  concepts_product_model_text: "./overview_model"
  console_2: The API endpoint of the Swisscom Application Cloud is https://api.lyra-836.appcloud.swisscom.com.
  console_links:
  contact_support:
  container_security1: <p class="note"><strong>Note</strong><span>:</span> This topic assumes that your CF deployment uses the newer Diego architecture, instead of the older DEA architecture. For more information, see the <a href="./diego/dea-vs-diego.html">Differences Between DEA and Diego Architectures</a> topic.</p>
  container_security2: To configure host-level network properties for DEAs, see <a href="http://bosh.io/jobs/dea_next?source=github.com/cloudfoundry/cf-release&version=197">DEA Network Properties</a>.
  cookies_shared_domain_1:
  cookies_shared_domain_2: For an application using a shared domain such as <code>example.com</code>, a cookie set to use the highest domain has a <code>Domain</code> attribute of <code>.example.com</code> in its HTTP response header.
  cse_id: 007825266128181862773:p5mbyfhxvi8
  custom_load_balancer:
  custom_services: If you are interested in building Services for Cloud Foundry and making them available to end users, see the <a href="http://docs.cloudfoundry.org/services/">Custom Services</a> documentation.
  custom_stack_nav_link: "* <a href=\"./custom-stack.html\" class=\"subnav\">Adding a Custom Stack</a><br />"
  custom_stack: You can also build your own custom stack. See the topic <a href="https://docs.cloudfoundry.org/adminguide/custom-stack.html">Adding a Custom Stack</a> of the Cloud Foundry docs for instructions.
  dea_algorithm_link: For more information about how the Cloud Controller schedules apps in Cloud Foundry's older Droplet Execution Agent (DEA) architecture, see the <a href="dea-algorithm.html">DEA Placement Algorithm</a> topic.
  dea_diego_diff_link: <li><a href="./diego/dea-vs-diego.html" class="subnav">Differences Between DEA and Diego Architectures</a></li>
  dea_diego_table_row:
  dea_diego_version: Diego architecture
  dea_metrics: <p class="note"><strong>Note</strong>&#58; For information about metrics specifc to the DEA architecture, see <a href="./dea-metrics.html">DEA Architecture Component Metrics</a>.</p>
  dea_properties: <a href="http://bosh.io/jobs/dea_next?source=github.com/cloudfoundry/cf-release&version=197">DEA Network Properties</a>
  dea: or Droplet Execution Agent (DEA) emits application logs as UDP messages to the Metron. For DEAs, the maximum log message size is approximately 60KiB, assuming overhead for the transporting envelope.
  dev_console_1:
  dev_console_2: CLI
  dev_console_3:
  dev_console_4:
  dev_console_5:
  dev_console_note:
  diego_architecture: This topic provides an overview of the structure and components of Diego, the new container management system for Cloud Foundry.
  diego_auction_dea: The Diego Auction replaces the <a href="../architecture/dea-algorithm.html">Cloud Controller DEA placement algorithm</a>, which performed the function of allocating processes to VMs in the pre-Diego Cloud Foundry architecture.
  diego_deploy: To deploy Diego, see the GitHub <a href="https://github.com/cloudfoundry-incubator/diego-release">Diego-Release</a>.
  diego_ssh_link: <a href="../diego/ssh-conceptual.html">Diego SSH package</a>
  disable_custom_buildpacks_note: Operators can choose to disable custom buildpacks in an entire deployment. For more information, see the <a href="../adminguide/buildpacks.html#disabling-custom-buildpacks">Disabling Custom Buildpacks</a> section of the Adding Buildpacks to Cloud Foundry topic.
  disable_custom_buildpacks: You can disable custom buildpacks for an entire deployment by setting the <code>cc.disable\_custom\_buildpacks</code> property to <code>false</code> in your Cloud Foundry deployment manifest. See the <a href="../deploying/index.html">Deploying Cloud Foundry</a> section for more information about creating and editing a manifest.
  disable_custom: <h2> <a id='disabling-custom-buildpacks'></a>Disabling Custom Buildpacks </h2> Operators can choose to disable custom buildpacks. For more information, see [Disabling Custom Buildpacks](../adminguide/buildpacks.html#disabling-custom-buildpacks).
  domain_name: cloudfoundry.org
  domains_shared_domains:
  email_notifications:
  enable_syslog_drain: See the [Configuring System Logging](../running/managing-cf/logging-config.html) and [Using Log Management Services](../devguide/services/log-management.html) topics for more information.
  example_domain_edu: www.example.edu
  example_domain_net: www.example.net
  example_domain_no_www: .example.com
  example_domain_org: www.example.org
  example_domain: www.example.com
  example_ip_1: 192.0.2.1
  example_ip_2: 198.51.100.1
  example_ip_3: 203.0.113.1
  external_ips: external IP addresses
  ga_account_id: UA-22181585-2
  gen_GSG:
  GSG_intro_sentence:
  http_routing: For more information, see the [Securing Traffic into Cloud Foundry](https://docs.cloudfoundry.org/adminguide/securing-traffic.html) topic of the Cloud Foundry docs.
  info_loc: In your Cloud Foundry deployment manifest
  ipsec_note:
  known_issues: <a href="http://docs.cloudfoundry.org/running/troubleshooting.html">Troubleshooting Cloud Foundry</a>
  link_adminguide_buildpack: You can find more documentation in the <a href="https://docs.cloudfoundry.org/adminguide/buildpacks.html">Adding Buildpacks to Cloud Foundry</a> topic of the Cloud Foundry docs.
  link_adminguide_commands: <p class="note"><strong>Note</strong>&#58; An Org Manager needs explicit administrator permissions to perform certain actions. Refer to the <a href="../adminguide/uaa-user-management.html">Creating and Managing Users with the UAA CLI (UAAC)</a> topic to learn how to create a user with admin rights.</p>
  link_adminguide_domains: For admin-specific commands, refer to the <a href="../../adminguide/manage-domains-routes.html">Managing Domains and Routes</a> topic.
  log_management:
  logg_forwarding: <a href="../running/managing-cf/logging-config.html#syslog-forward">Configuring System Logging</a>
  logg_scaling: <a href="../running/managing-cf/logging-config.html#scaling">Configuring System Logging</a>
  loggregator_name_or_link: Loggregator
  loggregator_firehose_link: Loggregator Firehose
  manifest_vs_cli_asg: You may also define ASGs in your Cloud Foundry deployment manifest, but these definitions only create security groups during first-time installation. To avoid confusion, any such definitions in the manifest should be generic. The cf CLI commands create-security-group and bind-security-group overwrite ASG definitions from the manifest. Upgrading Cloud Foundry retains ASG definitions made from the CLI and ignores any ASG definitions in the newer manifest.
  map_route: <p class="note"><strong>Note</strong><span>:</span> Applications running on the DEA architecture must be restarted after routes for an app are mapped or unmapped. Applications running on Diego do not need to be restarted.</p>
  max_app_size_table: Set in the <code>cc.packages.max_package_size</code> in the manifest
  max_app_size: the maximum app file size set in the <code>cc.packages.max\_package\_size</code> property in the manifest
  max_in_flight_header: <h4>Setting <code>max_in_flight</code> values</h4>
  max_in_flight: your max\_in\_flight number of DEAs
  net_traffic_rules: <a href="http://docs.cloudfoundry.org/adminguide/app-sec-groups.html">network traffic rules</a>
  notifications_api_1: For more information about the Notifications Service, see the Notifications API <a href="https://github.com/cloudfoundry-incubator/notifications/blob/master/V1_API.md">v1</a> or <a href="https://github.com/cloudfoundry-incubator/notifications/blob/master/V2_API.md">v2</a> documentation.
  notifications_link: Notification Service
  om_resurrector_header:
  om_resurrector_text:
  or_apps_man2:
  pcf_pools:
  pcf_rec: Cloud Foundry
  platform_ssh_configuration: Cloud Foundry deployments control SSH access to apps at the Cloud Foundry level. Additionally, Cloud Foundry supports load balancing of SSH sessions. The [Configuring SSH Access](https://docs.cloudfoundry.org/running/config-ssh.html) topic of the Cloud Foundry docs describes how to set SSH access for your deployment.
  pools_link: <a href="http://www.google.com/url?q=http%3A%2F%2Fdocs.cloudfoundry.org%2Fbosh%2Fdeployment-basics.html%23resource-pools&sa=D&sntz=1&usg=AFQjCNEyabXy-ymhPvBarCYQP8ZfIeL7pA">resource pools</a>
  port_limitations: To support WebSockets, the operator must configure the load balancer correctly. Depending on the configuration, clients may have to use a different port for WebSocket connections, such as port 4443. For more information, see the [Supporting WebSockets](https://docs.cloudfoundry.org/adminguide/supporting-websockets.html) topic of the Cloud Foundry docs.
  pre_diego_cc: In <a href="../diego/dea-vs-diego.html#design">pre-Diego architecture</a>, the Cloud Controller's Droplet Execution Agent (DEA) performed these app lifecycle tasks.
  pre_diego_node: In pre-Diego CF architecture, the <a href="./execution-agent.html">DEA node</a> performed the task of managing the applications and containers on a VM.
  private_app_domain: private-domain.example.com
  public_host: docs.developer.swisscom.com
  pw_policy:
  python_cf245only: <strong><a href="https://www.pivotaltracker.com/n/projects/966314/stories/132190561">Required</a> for Cloud Foundry v245 only:</strong>
  quota_resource: quota space
  resurrector: For more information about the Resurrector, see the [BOSH documentation](https://bosh.io/docs/resurrector.html).
  roles_table: "_oss_roles_table"
  route_services_config: <h2><a id='enabling-route-services-in-cloudfoundry'></a>Enabling Route Services in Cloud Foundry </h2>To enable support for Route Services in a Cloud Foundry deployment, the operator must provide a passphrase used by Gorouter to encrypt a header that is sent with the request to the route service. Gorouter uses this header to validate the request sent by the route service to the application route. The passphrase is configured in the cf-release manifest.<br><pre><code>properties<span>:</span><br> router<span>:</span><br>   route\_services\_secret<span>:</span> YOUR-SECRET-PASSPHRASE</code></pre><p class="note"><strong>Note</strong><span>:</span> The <code>route\_services\_secret</code> property should be a robust passphrase. See the <a href="https://github.com/cloudfoundry-incubator/routing-release/blob/master/jobs/gorouter/spec">Gorouter spec</a> in cf-release for more details.</p>Route Service instances should send requests to the value of x-cf-forwarded-url, obeying the scheme. The scheme is https by default; for environments that don't support TLS termination, this property can be set to false.<pre><code>properties<span>:</span><br> router<span>:</span><br>   route\_services\_recommend\_https<span>:</span> true</code></pre>The CF router will only forward requests to Route Services over SSL. By default, certificates provided by Route Services must be signed by a trusted CA. If they are not, the CF router will reject the request. In development environments this concern may be unreasonable. To disable SSL cert validation, modify the following property<span>:</span><br><pre><code>properties<span>:</span><br>  router<span>:</span><br>    ssl\_skip\_validation<span>:</span> true</code></pre>
  route_services: <p class="note"><strong>Note</strong>&#58; Route Services require Diego. Your deployment must use the Diego architecture or you must enable Diego for your app.</p>
  saml_provider: Retrieve the name of your SAML provider by opening your Cloud Foundry manifest and recording the value of the `login.saml.providers.provider-name` property.
  scale_table: "oss_scale_table"
  scaling_ert_db:
  scaling_ert:
  self_signed: Review the [Securing Traffic into Cloud Foundry](../adminguide/securing-traffic.html) topic for more information about how to retrieve certificates from the deployment manifest.
  services_link: <a href="http://docs.cloudfoundry.org/services/overview.html">services</a>
  services: <a href="http://docs.cloudfoundry.org/services/">services</a>
  ssh_marketplace_output: mysql  100mb MySQL databases on demand
  ssh_marketplace_step: List the marketplace services available using the [cf marketplace](http://cli.cloudfoundry.org/en-US/cf/marketplace.html) command. In this example, we create a MySQL service instance.
  ssh_service_access_key: <br>{<br>"hostname"<span>:</span> "us-cdbr-iron-east-01.mysql.net",<br>"jdbcUrl"<span>:</span> "jdbc:mysql://us-cdbr-iron-east-03.mysql.net/ad\_b2fca6t49704585d?user=b5136e448be920\u0026password=231f435o05",<br>"name"<span>:</span> "ad\_b2fca6t49704585d",<br>"password"<span>:</span> "231f435o05",<br>"port"<span>:</span> "3306",<br>"uri"<span>:</span> "mysql://b5136e448be920:<span>231f435o05<span>@</span>us-cdbr-iron-east-03.mysql.net</span>:3306/ad\_b2fca6t49704585d?reconnect=true",<br>"username"<span>:</span> "b5136e448be920"<br>}<br>
  ssh_service_host: us-cdbr-iron-east-01.mysql.net
  ssh_service_plan: 100mb
  ssh_service: MySQL
  ssl:
  staged_dea_intro: <a href="../concepts/diego/diego-architecture.html">Diego</a> and Droplet Execution Agents (DEAs). For information about how DEA applications are staged, see the <a href="./architecture/execution-agent.html#staging">Staging Apps with DEAs</a> section of the <a href="./architecture/execution-agent.html">Droplet Execution Agent</a> topic.
  suspended_roles_table: "_suspended_org_roles_table"
  tcp_iaas: Configure these IPs as your static IPs in your deployment manifest.
  tcp_port_review:
  tcp_port: "../adminguide/tcp_modify_ports"
  tcp_routing: <p class="note"><strong>Note</strong><span>:</span> TCP routing requires applications running on Diego. Applications running on the DEA architecture cannot use TCP routing.</p>
  uaa_cred: refer to the <code>uaa scim</code> section
  uaa: <a href="http://docs.cloudfoundry.org/adminguide/notifications.html">UAA</a>
  upload_custom_buildpacks: You can also use the <code>cf create-buildpack</code> command to upload the buildpack into your Cloud Foundry deployment, making it accessible without the <code>-b</code> flag&#58; <pre class="terminal">$ cf create-buildpack BUILDPACK PATH POSITION [--enable|--disable]</pre>
  user_org_creation:
  warden_garden:
  zipkin_enable: zipkin_oss_config
  zipkin_enable_link: <p>When the <a href="https://docs.cloudfoundry.org/adminguide/zipkin_tracing.html">Zipkin feature is enabled in Cloud Foundry</a>, the Gorouter examines the HTTP request headers and performs the following:</p>
  zipkin_enable_link_2: <p>When the <a href="https://docs.cloudfoundry.org/adminguide/zipkin_tracing.html">Zipkin feature is enabled in Cloud Foundry</a>, the Gorouter examines the HTTP request headers and performs the following:</p>
  ssl_gorouter_link: <a href="#gorouter_term">Terminating SSL/TLS at the Gorouter only</a>
  ssl_lb_gorouter_link: <a href="#lb_and_gorouter_term">Terminating SSL/TLS at the Load Balancer and the Gorouter</a>
  ssl_lb_link: <a href="#lb_term">Terminating SSL/TLS at the Load Balancer Only</a>
  garden_runc:

