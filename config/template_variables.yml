---
template_variables:
  platform_ssh_configuration: App SSH is enabled on the Swisscom Application Cloud.
  support_url: https://developer.swisscom.com/support
  title_image: ../images/logo.png
  title: Swisscom Developer Documentation
  hero_text: Home for innovators and passionate developers
  app_domain: scapp.io
  private_app_domain: my-domain.com
  example_domain_no_www: .example.com
  example_domain: www.example.com
  example_domain_net: www.example.net
  example_domain_org: www.example.org
  example_domain_edu: www.example.edu
  example_ip_1: 192.0.2.1
  example_ip_2: 198.51.100.1
  example_ip_3: 203.0.113.1
  book_title: Swisscom Developer Documentation
  quota_resource: quota space
  external_ips: external IP addresses
  admin: your Swisscom Application Cloud Administrator
  api_endpoint: https://api.lyra-836.appcloud.swisscom.com
  api_endpoint_book: https://api.lyra-836.appcloud.swisscom.com
  cli_download: https://github.com/cloudfoundry/cli#downloads
  console_2: The API endpoint of the Swisscom Application Cloud is https://api.lyra-836.appcloud.swisscom.com.
  info_loc: In your Cloud Foundry deployment manifest
  uaa_cred: refer to the <code>uaa scim</code> section
  pw_policy:
  GSG_intro_sentence:
  product_full: the Swisscom Application Cloud
  product_short: App Cloud
  product_abbr: (CF)
  known_issues:
  dev_console_note:
  dev_console_1:
  dev_console_2: CLI
  dev_console_3:
  dev_console_4:
  dev_console_5:
  billing_manager_role: <li><strong>Billing Account Owners</strong> create and manage billing accounts and payment information.
  billing_manager_role_note:
  roles_table: "_oss_roles_table"
  gen_GSG:
  cli_v6: <a href="https://docs.developer.swisscom.com/devguide/cf-cli/getting-started.html">Getting Started with the cf CLI</a>
  pools_link: <a href="https://www.google.com/url?q=http%3A%2F%2Fdocs.cloudfoundry.org%2Fbosh%2Fdeployment-basics.html%23resource-pools&sa=D&sntz=1&usg=AFQjCNEyabXy-ymhPvBarCYQP8ZfIeL7pA">resource pools</a>
  pcf_pools:
  om_resurrector_header:
  om_resurrector_text:
  resurrector: For more information regarding the resurrector, view the [Bosh documentation](https://bosh.io/docs/resurrector.html).
  max_in_flight: your max\_in\_flight number of DEAs
  az: availability zones
  azs: For more information regarding scaling your deployment, view the [Zero Downtime Deployment and Scaling in CF](../concepts/high-availability.html#availability).
  pcf_rec: Cloud Foundry
  console_links:
  app_sec_groups: Application Security Groups
  manifest_vs_cli_asg:
  dea_properties: <a href="https://bosh.io/jobs/dea_next?source=github.com/cloudfoundry/cf-release&version=197">DEA Network Properties</a>
  net_traffic_rules: network traffic rules
  port_limitations: "Applications running on Cloud Foundry receive requests through the URLs configured for the application. HTTP requests arrive on ports 80 and 443. Additionally, Cloud Foundry requires a channel for TCP/WebSocket traffic. The default <code>cf-release</code> manifest assigns port 4443 for TCP/WebSocket communications.<br><br>If your load balancer requires that you use a different port for TCP/WebSocket traffic, you must do the following in order to access logs from your app with the <code>cf logs APP\\_NAME</code> command: <ul><li>Set the value of the <code>port</code> sub-key of the <code>logger\\_endpoint</code> key in your manifest to the required value.</li><li>Configure your HAProxy or load balancer to receive TCP traffic on the port that you specified.</li></ul>"
  domains_shared_domains:
  ssl:
  custom_stack:
  custom_stack_nav_link:
  link_adminguid_buildpack:
  disable_custom_buildpacks:
  disable_custom_buildpacks_note: Custom buildpacks are enabled on the Swisscom Application Cloud.
  services: services
  api_v1_format: v1 format
  api_v2_format: v2 format
  custom_services:
  link_adminguide_domains:
  link_adminguide_commands:
  cookies_shared_domain_1:
  cookies_shared_domain_2: For an application using a shared domain such as <code>example.com</code>, a cookie set to use the highest domain has a <code>Domain</code> attribute of <code>.example.com</code> in its HTTP response header.
  notifications_api_1: For more information about the Notifications Service, see the Notifications API <a href="https://github.com/cloudfoundry-incubator/notifications/blob/master/V1_API.md">v1</a> or <a href="https://github.com/cloudfoundry-incubator/notifications/blob/master/V2_API.md">v2</a> documentation.
  custom_load_balancer:
  cse_id: 000705996776233217012:16qv1kpfzlk
  support_link: <a href="https://developer.swisscom.com/support" target="_blank">Get In Touch</a>
  support_call_to_action: <a href="https://developer.swisscom.com/support" target="_blank">Get In Touch</a>
  product_link:
  product_name: CF
  ga_account_id: UA-68437263-1
  loggregator_name_or_link: Loggregator
  logg_scaling: The Managing CF section of the Cloud Foundry docs
  logg_forwarding: The Managing CF section of the Cloud Foundry docs
  diego_ssh_link: <a href="../diego/ssh-conceptual.html">Diego SSH package</a>
  services_link: services
  domain_name: developer.swisscom.com
  book_title_short: Swisscom Developer Docs
  scaling_ert:
  scaling_ert_db:
  scale_table: "oss_scale_table"
  diego_deploy: To deploy Diego, see the GitHub <a href="https://github.com/cloudfoundry-incubator/diego-release">Diego-Release</a>.
  ssh_marketplace_step: List the marketplace services available using the [cf marketplace](http://cli.cloudfoundry.org/en-US/cf/marketplace.html) command. In this example, we create a MySQL service instance.
  ssh_marketplace_output: mysql  100mb MySQL databases on demand
  ssh_service: MySQL
  ssh_service_plan: 100mb
  ssh_service_access_key: <br>{<br>"hostname"<span>:</span> "us-cdbr-iron-east-01.mysql.net",<br>"jdbcUrl"<span>:</span> "jdbc:mysql://us-cdbr-iron-east-03.mysql.net/ad\_b2fca6t49704585d?user=b5136e448be920\u0026password=231f435o05",<br>"name"<span>:</span> "ad\_b2fca6t49704585d",<br>"password"<span>:</span> "231f435o05",<br>"port"<span>:</span> "3306",<br>"uri"<span>:</span> "mysql://b5136e448be920:<span>231f435o05<span>@</span>us-cdbr-iron-east-03.mysql.net</span>:3306/ad\_b2fca6t49704585d?reconnect=true",<br>"username"<span>:</span> "b5136e448be920"<br>}<br>
  ssh_service_host: us-cdbr-iron-east-01.mysql.net
  cloud_controller_dea_algorithm:
  cloud_controller_dea_agent:
  dea_diego_version: Diego architecture
  migrate_diego_intro:
  migrate_diego_scale:
  migrate_diego_enable:
  migrate_final_redeploy:
  http_routing:
  log_management:
  tcp_routing: <p class="note"><strong>Note</strong><span>:</span> TCP routing requires applications running on Diego. Applications running on the DEA architecture cannot use TCP routing.</p>
  map_route: <p class="note"><strong>Note</strong><span>:</span> Applications running on the DEA architecture must be restarted after routes for an app are mapped or unmapped. Applications running on Diego do not need to be restarted.</p>
  cc_logging_default: <p class="note"><strong>Note</strong><span>:</span> By default, Cloud Foundry does not enable Cloud Controller request logging. To enable this feature, you must set the <code>cc.security_event_logging.enabled</code> property in your Cloud Foundry manifest to <code>true</code> and redeploy.</p>
  enable_syslog_drain: See the [Configuring System Logging](../running/managing-cf/logging-config.html) and [Using Log Management Services](../devguide/services/log-management.html) topics for more information.

  warden_garden:
  dea_diego_table_row:
  product_url: https://github.com/cloudfoundry/cf-release
  uaa: UAA
  diego_architecture: This topic provides an overview of the structure and components of Diego, the new container management system for Cloud Foundry.
  self_signed:
  route_services_config: <h2><a id='enabling-route-services-in-cloudfoundry'></a>Enabling Route Services in Cloud Foundry </h2>To enable support for Route Services in a Cloud Foundry deployment, the operator must provide a passphrase used by GoRouter to encrypt a header that is sent with the request to the route service. This header is used by GoRouter to validate the request sent by the route service to the application route. The passphrase is configured in the cf-release manifest.<br><pre><code>properties<span>:</span><br> router<span>:</span><br>   route\_services\_secret<span>:</span> YOUR-SECRET-PASSPHRASE</code></pre><p class="note"><strong>Note</strong><span>:</span> The <code>route\_services\_secret</code> property should be a robust passphrase. See the <a href="https://github.com/cloudfoundry/cf-release/blob/master/jobs/gorouter/spec">GoRouter spec</a> in cf-release for more details.</p>Route Service instances should send requests to the value of x-cf-forwarded-url, obeying the scheme. The scheme is https by default; for environments that don't support TLS termination, this property can be set to false.<pre><code>properties<span>:</span><br> router<span>:</span><br>   route\_services\_recommend\_https<span>:</span> true</code></pre>The CF router will only forward requests to Route Services over SSL. By default, certificates provided by Route Services must be signed by a trusted CA. If they are not, the CF router will reject the request. In development environments this concern may be unreasonable. To disable SSL cert validation, modify the following property<span>:</span><br><pre><code>properties<span>:</span><br>  router<span>:</span><br>    ssl\_skip\_validation<span>:</span> true</code></pre>
  first_product_name: Cloud Foundry
  dea_metrics: <p class="note"><strong>Note</strong>&#58; For information about metrics specifc to the DEA architecture, see <a href="./dea-metrics.html">DEA Architecture Component Metrics</a>.</p>
  route_services: <p class="note"><strong>Note</strong>&#58; Route Services require Diego. Your deployment must use the Diego architecture or you must enable Diego for your app.</p>
  contact_support:
  disable_custom: <h2> <a id='disabling-custom-buildpacks'></a>Disabling Custom Buildpacks </h2> Operators can choose to disable custom buildpacks. For more information, see [Disabling Custom Buildpacks](../adminguide/buildpacks.html#disabling-custom-buildpacks).
  ipsec_note:

public_host: docs.developer.swisscom.com
