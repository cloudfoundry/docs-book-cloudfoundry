---
template_variables:
  platform_ssh_configuration: App SSH is enabled on the Swisscom Application Cloud.
  support_url: https://developer.swisscom.com/support
  title_image: ../images/logo.png
  title: Swisscom Developer Documentation
  hero_text: Home for innovators and passionate developers
  app_domain: scapp.io
  private_app_domain: my-domain.com
  example_domain_no_www: .example.com
  example_domain: www.example.com
  example_domain_net: www.example.net
  example_domain_org: www.example.org
  example_domain_edu: www.example.edu
  example_ip_1: 192.0.2.1
  example_ip_2: 198.51.100.1
  example_ip_3: 203.0.113.1
  book_title: Swisscom Developer Documentation
  quota_resource: quota space
  external_ips: external IP addresses
  admin: your Swisscom Application Cloud Administrator
  api_endpoint: https://api.lyra-836.appcloud.swisscom.com
  api_endpoint_book: https://api.lyra-836.appcloud.swisscom.com
  cli_download: https://github.com/cloudfoundry/cli#downloads
  console_2: The API endpoint of the Swisscom Application Cloud is https://api.lyra-836.appcloud.swisscom.com.
  info_loc: In your Cloud Foundry deployment manifest
  uaa_cred: refer to the <code>uaa scim</code> section
  pw_policy:
  GSG_intro_sentence:
  product_full: Swisscom Application Cloud
  product_short: App Cloud
  product_abbr: (CF)
  known_issues:
  dev_console_note:
  dev_console_1:
  dev_console_2: CLI
  dev_console_3:
  dev_console_4:
  dev_console_5:
  billing_manager_role: <ul><li><strong>Billing Account Owners</strong> create and manage billing accounts and payment information.</li></ul>
  billing_manager_role_note:
  roles_table: "_oss_roles_table"
  gen_GSG:
  cli_v6: <a href="https://docs.developer.swisscom.com/devguide/cf-cli/getting-started.html">Getting Started with the cf CLI</a>
  pools_link: <a href="https://www.google.com/url?q=http%3A%2F%2Fdocs.cloudfoundry.org%2Fbosh%2Fdeployment-basics.html%23resource-pools&sa=D&sntz=1&usg=AFQjCNEyabXy-ymhPvBarCYQP8ZfIeL7pA">resource pools</a>
  pcf_pools:
  om_resurrector_header:
  om_resurrector_text:
  resurrector: For more information about the Resurrector, see the [BOSH documentation](https://bosh.io/docs/resurrector.html).
  max_in_flight: your max\_in\_flight number of DEAs
  max_in_flight_header: <h4>Setting <code>max_in_flight</code> values</h4>
  az: availability zones
  azs: For more information regarding scaling your deployment, view the [Zero Downtime Deployment and Scaling in CF](../concepts/high-availability.html#availability).
  pcf_rec: Cloud Foundry
  console_links:
  app_sec_groups: <a href="http://docs.cloudfoundry.org/adminguide/app-sec-groups.html">Application Security Groups</a>
  app_sec_groups_link: For more information on how to create ASGs, see the [Application Security Groups](https://docs.cloudfoundry.org/adminguide/app-sec-groups.html) topic.
  manifest_vs_cli_asg: You may also define ASGs in your Cloud Foundry deployment manifest, but these definitions only create security groups during first-time installation. To avoid confusion, any such definitions in the manifest should be generic. The cf CLI commands create-security-group and bind-security-group overwrite ASG definitions from the manifest. Upgrading Cloud Foundry retains ASG definitions made from the CLI and ignores any ASG definitions in the newer manifest.
  dea_properties: <a href="http://bosh.io/jobs/dea_next?source=github.com/cloudfoundry/cf-release&version=197">DEA Network Properties</a>
  net_traffic_rules: <a href="http://docs.cloudfoundry.org/adminguide/app-sec-groups.html">network traffic rules</a>
  port_limitations: Please use port 443 for WebSocket connections.
  domains_shared_domains:
  ssl:
  custom_stack:
  custom_stack_nav_link:
  upload_custom_buildpacks:
  link_adminguid_buildpack:
  disable_custom_buildpacks:
  disable_custom_buildpacks_note: Custom buildpacks are enabled on the Swisscom Application Cloud.
  services: services
  api_v1_format: v1 format
  api_v2_format: v2 format
  custom_services:
  link_adminguide_domains:
  link_adminguide_commands:
  cookies_shared_domain_1:
  cookies_shared_domain_2: For an application using a shared domain such as <code>example.com</code>, a cookie set to use the highest domain has a <code>Domain</code> attribute of <code>.example.com</code> in its HTTP response header.
  notifications_api_1: For more information about the Notifications Service, see the Notifications API <a href="https://github.com/cloudfoundry-incubator/notifications/blob/master/V1_API.md">v1</a> or <a href="https://github.com/cloudfoundry-incubator/notifications/blob/master/V2_API.md">v2</a> documentation.
  asg_notifications_prereq:
  custom_load_balancer:
  cse_id: 007825266128181862773:p5mbyfhxvi8
  support_link:
  support_call_to_action:
  product_link:
  product_name: CF
  ga_account_id: UA-68437263-1
  loggregator_name_or_link: Loggregator
  logg_scaling: The Managing CF section of the Cloud Foundry docs
  logg_forwarding: The Managing CF section of the Cloud Foundry docs
  diego_ssh_link: <a href="../diego/ssh-conceptual.html">Diego SSH package</a>
  services_link: services
  domain_name: developer.swisscom.com
  book_title_short: Swisscom Developer Docs
  scaling_ert:
  scaling_ert_db:
  scale_table: "oss_scale_table"
  diego_deploy: To deploy Diego, see the GitHub <a href="https://github.com/cloudfoundry-incubator/diego-release">Diego-Release</a>.
  ssh_marketplace_step: List the marketplace services available using the [cf marketplace](http://cli.cloudfoundry.org/en-US/cf/marketplace.html) command. In this example, we create a MySQL service instance.
  ssh_marketplace_output: mysql  100mb MySQL databases on demand
  ssh_service: MySQL
  ssh_service_plan: 100mb
  ssh_service_access_key: <br>{<br>"hostname"<span>:</span> "us-cdbr-iron-east-01.mysql.net",<br>"jdbcUrl"<span>:</span> "jdbc:mysql://us-cdbr-iron-east-03.mysql.net/ad\_b2fca6t49704585d?user=b5136e448be920\u0026password=231f435o05",<br>"name"<span>:</span> "ad\_b2fca6t49704585d",<br>"password"<span>:</span> "231f435o05",<br>"port"<span>:</span> "3306",<br>"uri"<span>:</span> "mysql://b5136e448be920:<span>231f435o05<span>@</span>us-cdbr-iron-east-03.mysql.net</span>:3306/ad\_b2fca6t49704585d?reconnect=true",<br>"username"<span>:</span> "b5136e448be920"<br>}<br>
  ssh_service_host: us-cdbr-iron-east-01.mysql.net
  cloud_controller_dea_algorithm:
  cloud_controller_dea_agent:
  dea_diego_version: Diego architecture
  http_routing: For more information, see the [Securing Traffic into Cloud Foundry](https://docs.cloudfoundry.org/adminguide/securing-traffic.html) topic.
  log_management:
  tcp_routing: <p class="note"><strong>Note</strong><span>:</span> TCP routing requires applications running on Diego. Applications running on the DEA architecture cannot use TCP routing.</p>
  tcp_iaas: Configure these IPs as your static IPs in your deployment manifest.
  tcp_port: "../adminguide/tcp_modify_ports"
  tcp_port_review:
  map_route: <p class="note"><strong>Note</strong><span>:</span> Applications running on the DEA architecture must be restarted after routes for an app are mapped or unmapped. Applications running on Diego do not need to be restarted.</p>
  cc_logging_default: <p class="note"><strong>Note</strong><span>:</span> By default, Cloud Foundry does not enable Cloud Controller request logging. To enable this feature, you must set the <code>cc.security_event_logging.enabled</code> property in your Cloud Foundry manifest to <code>true</code> and redeploy.</p>
  enable_syslog_drain: See the [Configuring System Logging](https://docs.cloudfoundry.org/running/managing-cf/logging-config.html) and [Using Log Management Services](../devguide/services/log-management.html) topics for more information.
  or_apps_man2:
  warden_garden:
  dea_diego_table_row:
  product_url: https://github.com/cloudfoundry/cf-release
  uaa: <a href="http://docs.cloudfoundry.org/adminguide/notifications.html">UAA</a>
  concepts_product_model_header:
  concepts_product_model_text: "./overview_model"
  concepts_product_model_image:
  blobstore_kb:
  diego_architecture: This topic provides an overview of the structure and components of Diego, the new container management system for Cloud Foundry.
  self_signed:
  route_services_config:
  first_product_name: Cloud Foundry
  dea_metrics: <p class="note"><strong>Note</strong>&#58; For information about metrics specifc to the DEA architecture, see <a href="./dea-metrics.html">DEA Architecture Component Metrics</a>.</p>
  route_services: <p class="note"><strong>Note</strong>&#58; Route Services require Diego. Your deployment must use the Diego architecture or you must enable Diego for your app.</p>
  contact_support:
  disable_custom: <h2> <a id='disabling-custom-buildpacks'></a>Disabling Custom Buildpacks </h2> Operators can choose to disable custom buildpacks. For more information, see [Disabling Custom Buildpacks](../adminguide/buildpacks.html#disabling-custom-buildpacks).
  ipsec_note:
  user_org_creation:
  saml_provider: Retrieve the name of your SAML provider by opening your Cloud Foundry manifest and recording the value of the `login.saml.providers.provider-name` property.
  email_notifications:
  dea: or Droplet Execution Agent (DEA) emits application logs as UDP messages to the Metron. For DEAs, the maximum log message size is approximately 60KiB, assuming overhead for the transporting envelope.
  asg_desc: This field is available in Cloud Foundry v238 and later.
  app_sec_group_desc:  <code>description</code>   |This is an optional field that contains useful text for operators to manage security group rules. This field is available in Cloud Foundry v238 and later.
  appsecgroupdesc1: <span>,</span> <br>    "description"&#58; "Allow http and https traffic from ZoneA"
  buildpacks_index_dea: or Droplet Execution Agent (DEA)
  buildpacks_php_dea: DEA release<br><pre>$ cf files APP app/.bp/logs/bp.log</pre>
  pre_diego_cc: In <a href="../diego/dea-vs-diego.html#design">pre-Diego architecture</a>, the Cloud Controller's Droplet Execution Agent (DEA) performed these app lifecycle tasks.
  pre_diego_node: In pre-Diego CF architecture, the <a href="./execution-agent.html">DEA node</a> performed the task of managing the applications and containers on a VM.
  diego_auction_dea: The Diego Auction replaces the <a href="../architecture/cloud-controller.html#dea-placement">Cloud Controller DEA placement algorithm</a>, which performed the function of allocating processes to VMs in the pre-Diego Cloud Foundry architecture.
  Cloud Foundry has used two architectures for managing application containers: 
  staged_dea_intro: <a href="../concepts/diego/diego-architecture.html">Diego</a> and Droplet Execution Agents (DEAs). For information about how DEA applications are staged, see the <a href="./architecture/execution-agent.html#staging">Staging Apps with DEAs</a> section of the <a href="./architecture/execution-agent.html">Droplet Execution Agent</a> topic.
  dea_diego_diff_link: <li><a href="./diego/dea-vs-diego.html" class="subnav">Differences Between DEA and Diego Architectures</a></li>

public_host: docs.developer.swisscom.com
